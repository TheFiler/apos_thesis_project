---
import RichTextWidget from './RichTextWidget.astro';
const { widget } = Astro.props;
const form = widget._form?.[0];
if (!form) return null;
const recaptchaSiteKey = form.enableRecaptcha ? import.meta.env.RECAPTCHA_SITE_KEY : null;
---

<div id="formWrapper" class="form-widget box">
  <form
    id="contactForm"
    method="POST"
    action="/api/submit"
    data-form-id={form._id}
    data-recaptcha-sitekey={recaptchaSiteKey}
  >
    <input type="hidden" name="_id" value={form._id} />

    {form.contents?.items?.map((field) => {
      if (field.type === "@apostrophecms/form-text-field") {
        return (
          <div class="field">
            <label class="label" for={field.fieldName}>{field.fieldLabel}</label>
            <div class="control">
              <input
                class="input"
                type={field.inputType || "text"}
                id={field.fieldName}
                name={field.fieldName}
                required={field.required}
                placeholder={field.placeholder}
              />
            </div>
          </div>
        );
      }

      if (field.type === "@apostrophecms/form-textarea-field") {
        return (
          <div class="field">
            <label class="label" for={field.fieldName}>{field.fieldLabel}</label>
            <div class="control">
              <textarea
                class="textarea"
                id={field.fieldName}
                name={field.fieldName}
                required={field.required}
                placeholder={field.placeholder}
              ></textarea>
            </div>
          </div>
        );
      }

      if (field.type === "@apostrophecms/rich-text") {
        return <RichTextWidget widget={field} />;
      }

      return null;
    })}

    <div class="field is-grouped mt-4">
      <div class="control">
        <button type="submit" class="button is-link">{form.submitLabel || "Submit"}</button>
      </div>
    </div>
  </form>

  <div id="thankYouSection" style="display: none;" class="mt-5">
    <h2 class="title is-4">{form.thankYouHeading}</h2>
    {form.thankYouBody?.items?.map((field) => {
      if (field.type === "@apostrophecms/rich-text") {
        return <RichTextWidget widget={field} />;
      }
      return null;
    })}
  </div>
</div>

<script is:inline type="module">
  const formEl = document.getElementById("contactForm");
  const thankYou = document.getElementById("thankYouSection");
  const siteKey = formEl?.dataset.recaptchaSitekey;

  if (siteKey) {
    const script = document.createElement('script');
    script.src = `https://www.google.com/recaptcha/api.js?render=${siteKey}`;
    script.async = true;
    script.defer = true;
    document.head.appendChild(script);
  }

  formEl?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formDataRaw = new FormData(formEl);
    const formFields = Object.fromEntries(formDataRaw.entries());

    // üîê If reCAPTCHA is enabled, fetch token before submit
    if (siteKey && window.grecaptcha) {
      try {
        const token = await grecaptcha.execute(siteKey, { action: 'submit' });
        formFields.recaptcha = token;
      } catch (err) {
        console.error("‚ö†Ô∏è reCAPTCHA failed to load:", err);
        return;
      }
    }

    const finalFormData = new FormData();
    finalFormData.append("data", JSON.stringify(formFields));

    try {
      const res = await fetch("/api/submit", {
        method: "POST",
        body: finalFormData
      });

      if (res.ok) {
        formEl.style.display = "none";
        thankYou.style.display = "block";
      } else {
        console.error("Form submit failed:", await res.text());
      }
    } catch (err) {
      console.error("Form error:", err);
    }
  });
</script>

<style lang="scss">
.form-widget {
  max-width: 600px;
  margin: 2rem auto;
  padding: 2rem;

  .label {
    font-weight: 600;
  }

  .input,
  .textarea {
    border-radius: 4px;
    border: 1px solid #ccc;
  }

  .button {
    font-weight: bold;
  }

  #thankYouSection {
    animation: fadeIn 0.4s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
}
</style>
